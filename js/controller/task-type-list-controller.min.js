import{createInstance}from"../keyword/create-instance.min.js";import{Buildable}from"../interface/buildable.min.js";import{TaskTypeListModel}from"../model/task-type-list-model.min.js";import{Utility}from"../shared/utility.min.js";import{PageColorAdjuster}from"../shared/page-color-adjuster.min.js";import ScriptSeriesLoader from"../shared/script-series-loader.min.js";class TaskTypeListController extends Buildable{constructor(){super(),this.model=new TaskTypeListModel,this.scriptLoader=ScriptSeriesLoader,this.scriptLoader.add("https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js","jQuery"),this.scriptLoader.load()}static build=async()=>{const e=new TaskTypeListController;for(;e.scriptLoader.running;)await Utility.sleep(2e3);return e};execute=async()=>{const e=this.model.getTaskTypes();e.sort(((e,t)=>e.sort>t.sort?1:e.sort<t.sort?-1:0));for(const t of e){const e=this.model.getTaskThemeById(t.themeId),s=(e,t)=>`style='color:${e};background-color:${t};'`;let r="";r=e?s(e.foreColor,e.backgroundColor):s("#cecece","#ffffff");const o=`<div class='task-type-list-task-wrapper'>${`<p class='task-type-list-task-symbol' ${r}>${t.id}</p>`}${`<p class='task-type-list-task-description'>${t.name.ja}</p>`}</div>`;$("#task-type-list").append(o)}(await createInstance(PageColorAdjuster)).changeBackgroundColor()}}export{TaskTypeListController};