SeasonReminder=function(e){this._today=e||new Date,this._date=this._getDefaultSeasonDate(),this._color=this._getDefaultSeasonColor(),this.seasonInfluence=100,this.maxNumberOfReminding=1},SeasonReminder.prototype._getDefaultSeasonDate=function(){const e=new Object;e.spring=new Date(this._today.getFullYear()+"/3/21"),e.summer=new Date(this._today.getFullYear()+"/6/22"),e.autumn=new Date(this._today.getFullYear()+"/9/23"),e.winter=new Date(this._today.getFullYear()+"/12/22");const t=new Date(e.winter.getTime());t.setFullYear(t.getFullYear()-1),e.lastWinter=t;const n=new Date(e.spring.getTime());return n.setFullYear(n.getFullYear()+1),e.nextSpring=n,e},SeasonReminder.prototype._getDefaultSeasonColor=function(){const e=new Object;return e.spring="rgb(124, 252, 0)",e.summer="rgb(255, 99, 71)",e.autumn="rgb(210, 105, 30)",e.winter="rgb(176, 224, 230)",e.lastWinter=e.winter,e.nextSpring=e.spring,e},SeasonReminder.prototype._getDayDifference=function(e,t){return Math.abs(Math.ceil((e-t)/864e5))},SeasonReminder.prototype._getSeasonDegrees=function(){const e=[];for(var t in this._date)e.push({name:t,degree:this._getDayDifference(this._today,this._date[t])});for(e.sort(((e,t)=>e.degree-t.degree));e.length>2;)e.pop();const n=e[0].degree+e[1].degree;return e[0].degree=Math.round(e[0].degree/n*100),e[1].degree=Math.round(e[1].degree/n*100),e},SeasonReminder.prototype._isRGB=function(e){return!(3!==e.match(/\d+/g).length||!e.toLowerCase().startsWith("rgb"))},SeasonReminder.prototype._isRGBA=function(e){const t=e.match(/\d+/g);return!(4!==t.length&&5!==t.length||!e.toLowerCase().startsWith("rgba"))},SeasonReminder.prototype._createRGB=function(e){return`rgb(${e.join(",")})`},SeasonReminder.prototype._createRGBA=function(e,t){return`rgba(${e.join(",")}, ${t})`},SeasonReminder.prototype.getRemindedColor=function(e){const t=e.match(/\d+/g);if(!this._isRGB(e)&&!this._isRGBA(e))throw"Error: only color expressions such as 'rgb(0, 1, 2)' and 'rgba(0, 1, 2, 3)' are accepted.";const n=this._getSeasonDegrees(),r=this._color[n[0].name].match(/\d+/g),o=this._color[n[1].name].match(/\d+/g),s=[];for(let e=0;e<3;e++){const t=Number(o[e])-Number(r[e]),i=Number(r[e])+Math.round(t*(n[0].degree/100));s.push(i)}const i=[];for(let e=0;e<3;e++){const n=s[e]-Number(t[e]);let r=Number(t[e])+Math.round(n*(this.seasonInfluence/100));r=r<0?0:r>255?255:r,i.push(r)}switch(t.length){case 3:return this._createRGB(i);case 4:case 5:let e=t[3];return t[4]&&(e+="."+t[4]),this._createRGBA(i,e)}},SeasonReminder.prototype.remind=function(e,t){const n="numberOfReminding";if(e.dataset[n]&&e.dataset[n]>=this.maxNumberOfReminding)return;let r;if(r=r||window.getComputedStyle(e,""),r=r||e.currentStyle,r=r||document.defaultView.getComputedStyle(e,""),r[t]&&"rgba(0, 0, 0, 0)"!==r[t])try{const o=this.getRemindedColor(r[t]);e.style[t]=o||r[t],e.dataset[n]=1}catch{}},SeasonReminder.prototype.remindChildren=function(e,t,n,r){if(!e.children)return;const o=Array.from(e.children);for(let e=0;e<o.length;e++){const s=o[e];n&&!n.some((e=>e.isEqualNode(s)))&&(this.remind(s,t),r&&this.remindChildren(s,t,n,!0))}},SeasonReminder.prototype.remindAll=function(e,t=[]){const n=document.getElementsByTagName("*");for(let r=0;r<n.length;r++)t.some((e=>e.isEqualNode(n[r])))||this.remind(n[r],e)};